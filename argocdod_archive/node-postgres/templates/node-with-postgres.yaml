apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Values.namespace  }}
  annotations:
    openshift.io/description: 'Sample Node.js+Postgres App'
    openshift.io/display-name: 'Sample Node.js+Postgres App'
---
apiVersion: v1
kind: Service
metadata:
  name: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - port: 443
    targetPort: 8443
  selector:
    deploymentConfig: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    description: Route for application's http service.
  labels:
    application: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
  name: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
  namespace: {{ .Values.namespace }}
spec:
  host: ""
  to:
    kind: Service
    name: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
  tls:
    termination: passthrough
    insecureEdgeTerminationPolicy: Redirect
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    application: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
  name: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    deploymentConfig: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        application: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
        deploymentConfig: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
      name: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
    spec:
      containers:
      - name: {{ index .Values "pgcluster" "PG_CLUSTER_NAME" }}
        image: {{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: Always
        env:
          - name: APPLICATION_NAME
            valueFrom:
              configMapKeyRef:
                name: node-config
                key: APPLICATION_NAME
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: node-secret
                key: DB_USERNAME
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: node-secret
                key: DB_PASSWORD
          - name: DATABASE
            valueFrom:
              configMapKeyRef:
                name: node-config
                key: DATABASE
        livenessProbe:
          httpGet:
            path: /health-check
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 2
        ports:
        - containerPort: 8443
          name: http
          protocol: TCP
      terminationGracePeriodSeconds: 75
  triggers:
  - type: ConfigChange
